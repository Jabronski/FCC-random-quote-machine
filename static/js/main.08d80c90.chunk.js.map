{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["quotesURL","App","fetchQuotes","url","a","fetch","response","json","parsedJSON","setQuotesArr","quotes","useEffect","quoteAndAuthor","quote","author","useState","setQuote","setAuthor","quotesArr","ourColor","setOurColor","className","style","backgroundColor","id","color","class","target","href","encodeURI","icon","faTwitter","faTumblr","onClick","randomInteger","Math","floor","random","length","toString","console","log","generator","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAKIA,EAAY,yIA+EDC,MA7Ef,WAGE,IAAMC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKC,MAAMF,GADX,cACZG,EADY,gBAEOA,EAASC,OAFhB,OAEZC,EAFY,OAGlBC,EAAaD,EAAWE,QAHN,2CAAH,sDAOjBC,qBAAU,WACRT,EAAYF,KACX,CAACA,IAGJ,IAAMY,EAAiB,CACrB,CAAEC,MAAO,iFAA6EC,OAAQ,kBAIhG,EAA0BC,mBAASH,EAAe,GAAGC,OAArD,mBAAOA,EAAP,KAAcG,EAAd,KACA,EAA4BD,mBAASH,EAAe,GAAGE,QAAvD,mBAAOA,EAAP,KAAeG,EAAf,KACA,EAAkCF,mBAAS,MAA3C,mBAAOG,EAAP,KAAkBT,EAAlB,KACA,EAAgCM,mBAAS,WAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KAUA,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAaC,MAAO,CAAEC,gBAAiBJ,GAAzD,SAEE,sBAAKK,GAAG,UAAR,UAGE,sBAAKA,GAAG,YAAYF,MAAO,CAAEG,MAAON,GAApC,UAEE,sBAAKK,GAAG,QAAR,UACE,oBAAGA,GAAG,OAAN,cACIX,EADJ,OAIA,oBAAGW,GAAG,SAAN,eACKV,QAIP,sBAAKU,GAAG,QAAR,UAEE,mBAAGF,MAAO,CAAEC,gBAAiBJ,GAAYO,MAAM,SAASF,GAAG,cAAcG,OAAO,SAASC,KAAMC,UAAU,6CAAD,OAA8ChB,EAA9C,eAA0DC,IAAlK,SAA6K,cAAC,IAAD,CAAiBgB,KAAMC,QACpM,mBAAGT,MAAO,CAAEC,gBAAiBJ,GAAYO,MAAM,SAASF,GAAG,eAAeG,OAAO,SAASC,KAAMC,UAAU,gGAAD,OAAgGhB,EAAhG,eAA4GC,IAArN,SAAgO,cAAC,IAAD,CAAiBgB,KAAME,QACvP,mBAAGV,MAAO,CAAEC,gBAAiBJ,GAAYO,MAAM,SAASF,GAAG,YAAYI,KAAK,IAC1EK,QAAS,YA/BL,WAChB,IAAIC,EAAgBC,KAAKC,MAAMD,KAAKE,SAAWnB,EAAUoB,QACzDlB,EAAY,IAAMe,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBE,SAAS,KAChEvB,EAASE,EAAUgB,GAAerB,OAClCI,EAAUC,EAAUgB,GAAepB,QACnC0B,QAAQC,IAAItB,GA2BEuB,IAFJ,6BAWJ,qBAAKlB,GAAG,mBC9DHmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.08d80c90.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTumblr, faTwitter } from '@fortawesome/free-brands-svg-icons'\n\nlet quotesURL = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n\nfunction App() {\n\n  // Calling the API\n  const fetchQuotes = async (url) => {\n    const response = await fetch(url);\n    const parsedJSON = await response.json();\n    setQuotesArr(parsedJSON.quotes); // Call setQuotesArr and pass in the value from JSON.quotes\n  }\n\n  // Function for delivering API URL, not sure exactly\n  useEffect(() => {\n    fetchQuotes(quotesURL)\n  }, [quotesURL])\n\n  // Initial value for text and author, because I can't initialize \n  const quoteAndAuthor = [\n    { quote: \"You may be disappointed if you fail, but you are doomed if you donâ€™t try.\", author: \"Beverly Sills\" },\n  ]\n\n  // [variable name, change state function] = setState(value)\n  const [quote, setQuote] = useState(quoteAndAuthor[0].quote);\n  const [author, setAuthor] = useState(quoteAndAuthor[0].author);\n  const [quotesArr, setQuotesArr] = useState(null);\n  const [ourColor, setOurColor] = useState('#282c34')\n\n  // Is called when button is pressed (onClick)\n  const generator = () => {\n    let randomInteger = Math.floor(Math.random() * quotesArr.length)\n    setOurColor(\"#\" + Math.floor(Math.random() * 16777215).toString(16))\n    setQuote(quotesArr[randomInteger].quote);\n    setAuthor(quotesArr[randomInteger].author);\n    console.log(ourColor);\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{ backgroundColor: ourColor }}>\n\n        <div id=\"wrapper\">\n\n          {/* The quote generator */}\n          <div id=\"quote-box\" style={{ color: ourColor }}>\n\n            <div id=\"upper\">\n              <p id=\"text\">\n                \"{quote}\"\n              </p>\n\n              <p id=\"author\">\n                - {author}\n              </p>\n            </div>\n\n            <div id=\"lower\">\n\n              <a style={{ backgroundColor: ourColor }} class=\"button\" id=\"tweet-quote\" target=\"blank_\" href={encodeURI(`http://www.twitter.com/intent/tweet?text=\"${quote}\" - ${author}`)}><FontAwesomeIcon icon={faTwitter} /></a>\n              <a style={{ backgroundColor: ourColor }} class=\"button\" id=\"tumblr-quote\" target=\"blank_\" href={encodeURI(`https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes,freecodecamp&caption='\"${quote}\" - ${author}`)}><FontAwesomeIcon icon={faTumblr} /></a>\n              <a style={{ backgroundColor: ourColor }} class=\"button\" id=\"new-quote\" href=\"#\"\n                onClick={() => {\n                  generator();\n                }}>New Quote\n              </a>\n              \n            </div>\n\n          </div>\n\n          {/* The credits */}\n          <div id=\"footer\">\n\n          </div>\n\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}